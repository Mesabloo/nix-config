evaluate-commands %sh{
  plugins="$kak_config/plugins"
  mkdir -p "$plugins"

  [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"

  printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyortst/plug.kak" noload



# -- Prolog syntax highlighting
source "~/.config/kak/prolog.kak"

# -- prelude
plug "kakounedotcom/prelude.kak"


# -- Alacritty integration
plug "alexherbo2/alacritty.kak"


# -- Connect programs to clients
#plug "kakounedotcom/connect.kak"


# -- clipboard integration
plug "lePerdu/kakboard" %{
  hook global WinCreate .* %{ kakboard-enable }
}


# -- buffer management
plug "delapouite/kakoune-buffers" %{
  map global user b ": enter-buffers-mode<ret>" -docstring "buffers"
#  map global user B ": enter-user-mode -lock buffers<ret>" -docstring "buffers (lock)"
}


# -- line numbers
#plug "evanrelf/number-toggle.kak" config %{
#  require-module "number-toggle"
#  set-option global number_toggle_params -hlcursor -separator ' │ '
#}


# -- file explorer
plug "andreyorst/kaktree" defer kaktree %{
  set-option global kaktree_double_click_duration '0.5'
  set-option global kaktree_indentation 2
  set-option global kaktree_dir_icon_open  '▾ ﱮ'
  set-option global kaktree_dir_icon_close '▸ '
  set-option global kaktree_file_icon      '⠀⠀'

  map global user t ": kaktree-toggle<ret>" -docstring "toggle kaktree"
} config %{
  hook global WinSetOption filetype=kaktree %{
    remove-highlighter buffer/line_numbers
    remove-highlighter buffer/matching
    remove-highlighter buffer/wrap_lines
    remove-highlighter buffer/show-whitespaces

    hook buffer=*kaktree* ModeChange .*:.*:.* %{
      try %{ remove-highlighter buffer/line_numbers }
    }
  }
  
  kaktree-enable
}


# -- rainbow braces
#plug "listentolist/kakoune-rainbow" domain "gitlab.com" config %{
#  require-module rainbow
  # suggested mapping
  # map global user r ": rainbow<ret>" -docstring "rainbow brackets"
  # map global user R ": rmhl window/ranges_rainbow_specs<ret>" \
  #     -docstring "remove rainbow highlighter"
#  hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript|haskell|kak|python|tex) %{
#    rainbow
#  }
#}

# -- crosshair for the cursor
#plug "insipx/kak-crosshairs" config %{
#  set-face global crosshairs_line default,rgb:3B4252+d
#  set-face global crosshairs_column default,rgb:3B4252+d
#  
#  hook global WinDisplay .* %{
#    cursorline
#  }
#}


# -- smooth autoscroll
plug "caksoylar/kakoune-smooth-scroll" config %{
  hook global WinCreate [^*].* %{
    hook -once window WinDisplay .* %{
      smooth-scroll-enable
    }
  }
}


# -- kakship modeline
declare-option str lsp_progress ""
plug "mesabloo/kakship" do %{
  cargo build --release --locked
  cargo install --force --path . --root ~/.local
} config %{
  kakship-enable
}


# -- LSP
plug "kak-lsp/kak-lsp" do %{
  cargo build --release --locked
  cargo install --force --path . --root ~/.local
} config %{
  set global lsp_diagnostic_line_error_sign ''
  set global lsp_diagnostic_line_warning_sign ''
  set global lsp_diagnostic_line_info_sign ''
  set global lsp_diagnostic_line_hint_sign ''
  set global lsp_hover_max_lines 30

  set-face global LineFlagError bright-red
  set-face global LineFlagWarning bright-yellow
  set-face global LineFlagInfo bright-blue
  set-face global LineFlagInfo bright-green

  # change L&F of markdown boxes
  set-face global InfoMono default+d
  set-face global InfoLink blue+u
  set-face global InfoLinkMono blue+ud
  set-face global InfoBlockQuote black
  set-face global InfoBlock @InfoMono

  set-face global InfoDiagnosticError @LineFlagError
  set-face global InfoDiagnosticHint @LineFlagHint
  set-face global InfoDiagnosticInformation @LineFlagInformation
  set-face global InfoDiagnosticWarning @LineFlagWarning

  set-face global InlayHint bright-black,default+i

  define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
  define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
  define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

  hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript|haskell|nix|latex) %{
    define-command -hidden -params 4 -override lsp-handle-progress %{
      echo -debug %sh{ echo "kak-lsp: %opt{filetype} language server: $1" }
      set global lsp_progress %sh{
        if [ "$4" = "" ]; then
          echo " …"
        else
	        echo " ✓"
        fi
      }
    }

    set-option window lsp_auto_highlight_references true
    set-option window lsp_hover_anchor false
    lsp-auto-hover-enable
    echo -debug "Enabling LSP for filetype %opt{filetype}"
    lsp-enable-window
  }

  hook global WinSetOption filetype=rust %{
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
      remove-hooks window rust-inlay-hints
    }
    
    set window lsp_server_configuration rust.clippy_preference="on"

    hook window BufWritePre .* %{
      evaluate-commands %sh{
        test -f rustfmt.toml && printf lsp-formatting-sync
      }
    }
  }

  hook global KakEnd .* %{
		set global lsp_progress ""
    
    lsp-exit
  }

  map global user l ": enter-user-mode lsp<ret>" -docstring "LSP mode"
} defer kak-lsp %{
}


# -- auto pairs
plug "alexherbo2/auto-pairs.kak" config %{
  set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›

  hook global WinCreate .* %{
    enable-auto-pairs
  }
}


# -- extra file types handling
plug "kakoune-editor/kakoune-extra-filetypes"


# -- git integration
plug "chambln/kakoune-kit" config %{
  map global user g ': git status -bs<ret>' -docstring 'git status'
  hook global WinSetOption filetype=git-status %{
    map window normal c ': git commit --verbose '
    map window normal l ': git log --oneline --graph<ret>'
    map window normal d ': -- %val{selections}<a-!><home> git diff '
    map window normal D ': -- %val{selections}<a-!><home> git diff --cached '
    map window normal a ': -- %val{selections}<a-!><home> git add '
    map window normal A ': -- %val{selections}<a-!><home> repl git add -p '
    map window normal r ': -- %val{selections}<a-!><home> git reset '
    map window normal R ': -- %val{selections}<a-!><home> repl git reset -p '
    map window normal o ': -- %val{selections}<a-!><home> git checkout '

    remove-highlighter buffer/line_numbers
  }
  hook global WinSetOption filetype=git-log %{
    map window normal d     ': %val{selections}<a-!><home> git diff '
    map window normal <ret> ': %val{selections}<a-!><home> git show '
    map window normal r     ': %val{selections}<a-!><home> git reset '
    map window normal R     ': %val{selections}<a-!><home> repl git reset -p '
    map window normal o     ': %val{selections}<a-!><home> git checkout '

    remove-highlighter buffer/line_numbers
  }
}


# -- add surrounding capabilities
#plug "alexherbo2/surround.kak" config %{
# map global normal <c-s> ': surround<ret>' -docstring 'surround with...'
#}


# -- smart tabs
plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop %opt{indentwidth}
} config %{
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|c|cpp|haskell|nix|python|coq) expandtab
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
}


# -- easy surrounding of selection
plug "h-youhei/kakoune-surround" config %{
  declare-user-mode surround
  map global surround s ': surround<ret>' -docstring 'surround'
  map global surround c ': change-surround<ret>' -docstring 'change'
  map global surround d ': delete-surround<ret>' -docstring 'delete'
  map global surround t ': select-surrounding-tag<ret>' -docstring 'select tag'

  map global normal <a-s> ': enter-user-mode surround<ret>'
}


# # -- put pairs in rainbow colors for easier distinction
plug "Bodhizafa/kak-rainbow" config %{
  set-option global rainbow_colors rgb:5E81AC+db rgb:BF616A+db rgb:D08770+db rgb:EBCB8B+db rgb:A3BE8C+db rgb:B48EAD+db
 
  hook global WinSetOption filetype=(rust|python|c|cpp|scheme|lisp|clojure|javascript|json|kak|haskell|python|latex|nix) %{
    rainbow-enable-window
  }
}


# # -- zettelkasten-like wiki pages
# plug "TeddyDD/kakoune-wiki" config %{
#   wiki-setup %sh{ echo $HOME/.wiki }
# }


# # -- LaTeX input in insert mode

# # -- new keyboard user mode
declare-user-mode keyboard
map global normal <c-k> ': enter-user-mode keyboard<ret>'

plug "tex-input.kak" load-path "~/projects/tex-input.kak/" config %{  
  tex-input-setup
  map global keyboard t ': tex-input-toggle<ret>' -docstring "toggle LaTeX input"

  hook global WinSetOption filetype=(agda|markdown|coq)) %{
    tex-input-enable
  }
}

plug "zilch.kak" load-path "~/projects/zilch/zilch.kak/" config %{

}

# # -- CoqIDE for kakoune
# plug "coqoune" load-path "~/projects/coqoune/" config %{  
#   set-option global coqoune_shell "bash"

#   hook global BufSetOption filetype=coq %{
#     set-option global coqoune_coqproject %sh{
#       curpath="${kak_buffile%/*}"
#       if ! [ -d "$curpath" ]; then
#         echo ""
#       else     
#         while ! [ "$curpath" = "/" ];
#         do
#             find "$curpath" -maxdepth 1 -mindepth 1 -iname '_CoqProject'
#             # Note: if you want to ignore symlinks, use "$(realpath -s "$path"/..)"
#             curpath="$(readlink -f "$curpath"/..)"
#         done
#       fi
#     }
    
#     coq-start
#     nop %sh{
#       buffer_cmd() {
#         echo "try %{
#           buffer *$1*
#           rename-client %{coq-$1-client}

#           remove-highlighter buffer/line_numbers
#           remove-highlighter buffer/matching
#           remove-highlighter buffer/wrap_lines
#           remove-highlighter buffer/show-whitespaces
#         }"
#       }
      
#       if [ -n "${kak_ot_termcmd}"]; then
#         (${kak_opt_termcmd} "sh -c 'kak -c ${kak_session} -e \"$(buffer_cmd "goal")\"'") > /dev/null 2>&1 < /dev/null &
#         (${kak_opt_termcmd} "sh -c 'kak -c ${kak_session} -e \"$(buffer_cmd "result")\"'") > /dev/null 2>&1 < /dev/null &
#       fi
#     }
#     hook global ClientClose .* %{
#       try %{
#         evaluate-commands -client coq-goal-client "quit!"
#         evaluate-commands -client coq-result-client "quit!"
#       }
#     }

#     set-face buffer coqoune_processed default,default+id

#     declare-user-mode coq

#     map buffer user c ": enter-user-mode coq<ret>" \
#         -docstring "enter the Coq user mode"

#     map buffer coq c ": enter-user-mode -lock coq<ret>" \
#         -docstring "stay in the Coq user mode"

#     map buffer coq k ": coq-back<ret>" \
#         -docstring "undo last sent command"

#     map buffer coq j ": coq-next<ret>" \
#         -docstring "send the next command to Coq"

#     map buffer coq <ret> ": coq-to-cursor<ret>" \
#         -docstring "move tip to main cursor"

#     map buffer coq h ": coq-hints<ret>" \
#         -docstring "receive hints at current tip"

#     map buffer coq q ": coq-query ''<left>" \
#         -docstring "send a query to Coq"
#   }
# }


# CoqIDE for kakoune
plug "coqide.kak" load-path "~/projects/coqide.kak" config %{
  declare-option -hidden str coqide_close_panels

    declare-user-mode coq
    map global coq c ": enter-user-mode -lock coq<ret>" \
      -docstring "stay in the Coq user mode"
    map global coq k ": coqide-previous<ret>" \
      -docstring "unprove the last statement"
    map global coq j ": coqide-next<ret>" \
      -docstring "prove the next statement"
    map global coq <ret> ": coqide-move-to<ret>" \
      -docstring "move tip to main cursor"
    map global coq l ": coqide-dump-log<ret>" \
      -docstring "dump logs"
    map global coq q ": coqide-query<ret>" \
      -docstring "send a query to coqtop"

  # Create two additional clients to show goals and results
  hook global BufCreate \*coqide-(.*)-(goal|result)\* %{
    evaluate-commands %sh{
      client_name="coq-${kak_hook_param_capture_1}-${kak_hook_param_capture_2}"
      regex_safe="$(sed 's/\*/\\*/g' <<< "$kak_hook_param_capture_0")"

      switch_to_buffer="
        buffer $kak_hook_param_capture_0
        rename-client $client_name

        try %{
          remove-highlighter buffer/line_numbers
          remove-highlighter buffer/matching
          remove-highlighter buffer/wrap_lines
          remove-highlighter buffer/show-whitespaces
        }
      "
      ${kak_opt_termcmd} "kak -c $kak_session -e '$switch_to_buffer'" &>/dev/null </dev/null &

      echo "hook -once global BufClose '$regex_safe' %{
        evaluate-commands -client '$client_name' 'quit!'
      }"
    }
  }


  hook global WinSetOption filetype=coq %{ 
    coqide-start

    # User mode to interact with CoqIDE only in Coq files
    map buffer user c ": enter-user-mode coq<ret>" \
      -docstring "enter the Coq user mode"

    # Better looking face
    set-face global coqide_processed default,black+id

    # Commands to execute when the buffer is closed.
    # These are declared here as a string in order to have the value of `%opt{coqide_pid}`
    # (which is an internal option)
    set-option buffer coqide_close_panels "
      evaluate-commands -client coq-%opt{coqide_pid}-goal 'quit!'
      evaluate-commands -client coq-%opt{coqide_pid}-result 'quit!'
      remove-hooks coqide-%opt{coqide_pid}
    "

    # Remove the side panels when closing the buffer
    hook global -group "coqide-%opt{coqide_pid}" BufClose "%val{buffile}" %{ try %opt{coqide_close_panels} }
    hook global -group "coqide-%opt{coqide_pid}" ClientClose .* %{ try %opt{coqide_close_panels} }
  }
}


# ------------------------------------------------------------------------------------------------------------------


# -- set line numbers on all buffer
declare-option -docstring "The position in the buffer, in percent" int buf_position 0
hook global BufSetOption filetype=(?!\*kaktree\*).* %{
  hook -always buffer ModeChange push:.*:insert %{
    add-highlighter -override buffer/line_numbers number-lines -separator ' │ ' -hlcursor
  }
  hook -always buffer ModeChange pop:insert:.* %{
		add-highlighter -override buffer/line_numbers number-lines -separator ' │ ' -hlcursor -relative
  }

  add-highlighter -override buffer/line_numbers number-lines -separator ' │ ' -hlcursor -relative
  add-highlighter buffer/wrap_lines wrap -word -indent

  hook buffer RawKey .* %{
    set-option buffer buf_position %sh{
      echo -n $(($kak_cursor_line * 100 / $kak_buf_line_count))
    }
  }
}


# -- set <tab> for autocompletion
hook global InsertCompletionShow .* %{
  try %{
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      map window insert <tab> <tab>
      map window insert <s-tab> <s-tab>
    }
  }
}


# -- set indent to 2 spaces 
set global indentwidth 2
set global tabstop 2


# -- set modeline on the top
set global ui_options status_on_top=yes


# -- custom movements keymaps
map global normal <c-left> 'b;'
map global normal <c-right> 'w;'
map global normal <c-up> <c-u>
map global normal <c-down> <c-d>
# ↓↓↓ this one does not work in alacritty...
# map global insert <c-backspace> '<esc>b<a-c>'


# -- set some custom colors
set-face global Information white,rgb:434C5E
set-face global MenuBackground white,rgb:3B4252
set-face global MenuForeground default,rgb:3B4252+r
#set-face global StatusLine default,rgb:3B4252


# -- load the closest editorconfig to the newly opened buffer
hook global BufOpenFile .* editorconfig-load
hook global BufNewFile .* editorconfig-load


# -- output a simple "-- INSERT --" when entering insert mode
hook global ModeChange push:.*:insert %{
  echo -markup "{+b}-- INSERT --"
}
hook global ModeChange pop:insert:.* echo


# -- set formatters
declare-user-mode format
map global format s ': format-selections<ret>' -docstring 'selections'
map global format b ': format-buffer<ret>' -docstring 'buffer'

map global user f ': enter-user-mode format<ret>' -docstring 'format'

hook global WinSetOption filetype=python %{ set-option buffer formatcmd 'yapf' }
hook global WinSetOption filetype=nix %{ set-option buffer formatcmd 'nixpkgs-fmt' }

# -- small tweaks
set-face global comment default+d
