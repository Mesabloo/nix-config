evaluate-commands %sh{
  plugins="$kak_config/plugins"
  mkdir -p "$plugins"

  [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"

  printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyortst/plug.kak" noload



# -- Prolog syntax highlighting
source "~/.config/kak/prolog.kak"

# -- prelude
# plug "kakounedotcom/prelude.kak"


# -- Alacritty integration
# plug "alexherbo2/alacritty.kak"


# -- Connect programs to clients
#plug "kakounedotcom/connect.kak"


# -- clipboard integration
plug "lePerdu/kakboard" %{
  hook global WinCreate .* %{ kakboard-enable }
}


# -- buffer management
plug "delapouite/kakoune-buffers" %{
  map global user b ": enter-buffers-mode<ret>" -docstring "buffers"
#  map global user B ": enter-user-mode -lock buffers<ret>" -docstring "buffers (lock)"
}


# -- line numbers
#plug "evanrelf/number-toggle.kak" config %{
#  require-module "number-toggle"
#  set-option global number_toggle_params -hlcursor -separator ' │ '
#}


# -- file explorer
define-command \
    -params .. -file-completion \
    -docstring %{ranger [<arguments>]: open the file system explorer to select buffers to open
    All the optional arguments are forwarded to the ranger utility} \
    ranger %{
      try %{
        terminal-tab ranger %arg{@} --cmd %sh[
          cmd="map <return> chain eval fm.execute_console(f\"shell kak -p "
          cmd="${cmd}$kak_session <<< 'evaluate-commands -client $kak_client edit {fm.thisfile.path}'\") "
          cmd="${cmd}if fm.thisfile.is_file else fm.execute_console(\"move right=1\") ; quit!"
          echo "$cmd"
        ]
      } catch %{
        terminal ranger %arg{@} --cmd %sh[
          cmd="map <return> chain eval fm.execute_console(f\"shell kak -p "
          cmd="${cmd}$kak_session <<< 'evaluate-commands -client $kak_client edit {fm.thisfile.path}'\") "
          cmd="${cmd}if fm.thisfile.is_file else fm.execute_console(\"move right=1\") ; quit!"
          echo "$cmd"
        ]
      }
}
define-command -docstring %{
  Open ranger, selecting the file of the current buffer if it has one.
} open-ranger-on-current-file %{
  ranger --selectfile %val{buffile}
  # evaluate-commands %sh{
  #   relpath_to_bufname=$(python -c 'import os, sys; print(os.path.relpath(*sys.argv[1:]))' "$kak_buffile" "$(pwd)")
  #   echo "echo -debug 'Opening ranger with file $relpath_to_bufname'"
  #   echo "ranger --selectfile $relpath_to_bufname"
  # }
}
map global user r ": open-ranger-on-current-file<ret>" -docstring "open files with ranger"

# plug "Crote/kakoune-ranger" %{
#   map global user t ": ranger-select<ret>" -docstring "open ranger"
# }
# plug "andreyorst/kaktree" defer kaktree %{
#   set-option global kaktree_double_click_duration '0.5'
#   set-option global kaktree_indentation 2
#   set-option global kaktree_dir_icon_open  '▾ ﱮ'
#   set-option global kaktree_dir_icon_close '▸ '
#   set-option global kaktree_file_icon      '⠀⠀'

#   map global user t ": kaktree-toggle<ret>" -docstring "toggle kaktree"
# } config %{
#   hook global WinSetOption filetype=kaktree %{
#     remove-highlighter buffer/line_numbers
#     remove-highlighter buffer/matching
#     remove-highlighter buffer/wrap_lines
#     remove-highlighter buffer/show-whitespaces

#     hook buffer=*kaktree* ModeChange .*:.*:.* %{
#       try %{ remove-highlighter buffer/line_numbers }
#     }
#   }
  
#   kaktree-enable
# }


# -- rainbow braces
#plug "listentolist/kakoune-rainbow" domain "gitlab.com" config %{
#  require-module rainbow
  # suggested mapping
  # map global user r ": rainbow<ret>" -docstring "rainbow brackets"
  # map global user R ": rmhl window/ranges_rainbow_specs<ret>" \
  #     -docstring "remove rainbow highlighter"
#  hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript|haskell|kak|python|tex) %{
#    rainbow
#  }
#}

# -- crosshair for the cursor
#plug "insipx/kak-crosshairs" config %{
#  set-face global crosshairs_line default,rgb:3B4252+d
#  set-face global crosshairs_column default,rgb:3B4252+d
#  
#  hook global WinDisplay .* %{
#    cursorline
#  }
#}


# -- smooth autoscroll
# plug "caksoylar/kakoune-smooth-scroll" config %{
#   hook global WinCreate [^*].* %{
#     hook -once window WinDisplay .* %{
#       smooth-scroll-enable
#     }
#   }
# }


# -- LSP
declare-option -hidden str lsp_progress_indicator ""
plug "kak-lsp/kak-lsp" commit "751bb5dc90a6fc23c0170bf4b0e2c37083f4a1e2" do %{
  cargo build --release --locked
  cargo install --force --path . --root ~/.local
} config %{
  set-option global lsp_diagnostic_line_error_sign ''
  set-option global lsp_diagnostic_line_warning_sign ''
  set-option global lsp_diagnostic_line_info_sign ''
  set-option global lsp_diagnostic_line_hint_sign ''
  set-option global lsp_code_lens_sign ''
  set-option global lsp_hover_max_lines 30

  set-face global LineFlagError bright-red+b
  set-face global LineFlagWarning bright-yellow+b
  set-face global LineFlagInfo bright-green+b
  set-face global LineFlagHint bright-blue+b

  # change L&F of reports in code
  set-face global DiagnosticError default,default,bright-red+u
  set-face global DiagnosticWarning default,default,bright-yellow+u
  set-face global DiagnosticHint default,default,bright-blue+u
  set-face global DiagnosticInfo default,default,bright-green+u

  # change L&F of markdown boxes
  set-face global InfoMono default+d
  set-face global InfoLink blue+u
  set-face global InfoLinkMono blue+u
  set-face global InfoBlockQuote black
  set-face global InfoBlock @InfoMono

  set-face global InfoDiagnosticError @LineFlagError
  set-face global InfoDiagnosticHint @LineFlagHint
  set-face global InfoDiagnosticInformation @LineFlagInformation
  set-face global InfoDiagnosticWarning @LineFlagWarning

  set-face global InlayHint bright-black,default+i
  set-face global InlayCodeLens @InlayHint

  define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
  define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
  define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

  hook global -group 'lsp' WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript|haskell|nix|latex|dhall|python) %{
    set-option window lsp_auto_highlight_references true
    set-option window lsp_hover_anchor false
    lsp-auto-hover-enable
    lsp-inlay-hints-enable window
    lsp-inlay-code-lenses-enable window
    echo -debug "Enabling LSP for filetype %opt{filetype}"

    define-command -hidden -params 6 -override lsp-handle-progress %{
      set global lsp_progress_indicator %sh{
        if [ "$5" = "" ]; then
          echo ""
        else
	        echo ""
        fi
      }
    }
  
    hook window BufWritePre .* lsp-formatting-sync

    set global lsp_progress_indicator ""
    lsp-enable-window
  }

  hook global -group 'lsp' WinSetOption filetype=rust %{
    set window lsp_server_configuration rust.clippy_preference="on"
  }


  hook global -group 'lsp' KakEnd .* %{
    lsp-exit
  }

  map global user l ": enter-user-mode lsp<ret>" -docstring "LSP mode"
} defer kak-lsp %{
}


# -- kakship modeline
plug "mesabloo/kakship" do %{
  cargo build --release --locked
  cargo install --force --path . --root ~/.local
} config %{
  kakship-enable
}


# -- auto pairs
# plug "alexherbo2/auto-pairs.kak" config %{
#   set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›

#   hook global WinCreate .* %{
#     enable-auto-pairs
#   }
# }


# -- extra file types handling
plug "kakoune-editor/kakoune-extra-filetypes"


# -- git integration
plug "chambln/kakoune-kit" config %{
  map global user g ': git status -bs<ret>' -docstring 'git status'
  hook global WinSetOption filetype=git-status %{
    map window normal c ': git commit --verbose '
    map window normal l ': git log --oneline --graph<ret>'
    map window normal d ': -- %val{selections}<a-!><home> git diff '
    map window normal D ': -- %val{selections}<a-!><home> git diff --cached '
    map window normal a ': -- %val{selections}<a-!><home> git add '
    map window normal A ': -- %val{selections}<a-!><home> repl git add -p '
    map window normal r ': -- %val{selections}<a-!><home> git reset '
    map window normal R ': -- %val{selections}<a-!><home> repl git reset -p '
    map window normal o ': -- %val{selections}<a-!><home> git checkout '

    remove-highlighter buffer/line_numbers
  }
  hook global WinSetOption filetype=git-log %{
    map window normal d     ': %val{selections}<a-!><home> git diff '
    map window normal <ret> ': %val{selections}<a-!><home> git show '
    map window normal r     ': %val{selections}<a-!><home> git reset '
    map window normal R     ': %val{selections}<a-!><home> repl git reset -p '
    map window normal o     ': %val{selections}<a-!><home> git checkout '

    remove-highlighter buffer/line_numbers
  }
}


# -- add surrounding capabilities
#plug "alexherbo2/surround.kak" config %{
# map global normal <c-s> ': surround<ret>' -docstring 'surround with...'
#}


# -- smart tabs
plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop %opt{indentwidth}
} config %{
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|c|cpp|haskell|nix|python|coq) expandtab
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
}


# -- easy surrounding of selection
plug "h-youhei/kakoune-surround" config %{
  declare-user-mode surround
  map global surround s ': surround<ret>' -docstring 'surround'
  map global surround c ': change-surround<ret>' -docstring 'change'
  map global surround d ': delete-surround<ret>' -docstring 'delete'
  map global surround t ': select-surrounding-tag<ret>' -docstring 'select tag'

  map global normal <a-s> ': enter-user-mode surround<ret>'
}


# # -- put pairs in rainbow colors for easier distinction
plug "Bodhizafa/kak-rainbow" config %{
  set-option global rainbow_colors rgb:5E81AC+db rgb:BF616A+db rgb:D08770+db rgb:EBCB8B+db rgb:A3BE8C+db rgb:B48EAD+db
 
  hook global WinSetOption filetype=(rust|python|c|cpp|scheme|lisp|clojure|javascript|json|kak|haskell|python|latex|nix) %{
    rainbow-enable-window
  }
}


# # -- zettelkasten-like wiki pages
# plug "TeddyDD/kakoune-wiki" config %{
#   wiki-setup %sh{ echo $HOME/.wiki }
# }


# # -- LaTeX input in insert mode

# # -- new keyboard user mode
declare-user-mode keyboard
map global normal <c-k> ': enter-user-mode keyboard<ret>'

plug "tex-input.kak" load-path "~/projects/tex-input.kak/" config %{  
  tex-input-setup
  map global keyboard t ': tex-input-toggle<ret>' -docstring "toggle LaTeX input"

  hook global WinSetOption filetype=(agda|markdown|coq)) %{
    tex-input-enable
  }
}

plug "zilch.kak" load-path "~/projects/zilch/zilch.kak/" config %{

}


# CoqIDE for kakoune
plug "coqide.kak" load-path "~/projects/coqide.kak" config %{
  declare-option -hidden str coqide_close_panels

  declare-user-mode coq
  map global coq c ": enter-user-mode -lock coq<ret>" \
    -docstring "stay in the Coq user mode"
  map global coq k ": coqide-previous<ret>" \
    -docstring "unprove the last statement"
  map global coq j ": coqide-next<ret>" \
    -docstring "prove the next statement"
  map global coq <ret> ": coqide-move-to<ret>" \
    -docstring "move tip to main cursor"
  map global coq t ": coqide-goto-tip<ret>" \
    -docstring "go to the document tip"
  map global coq h ": coqide-hints<ret>" \
    -docstring "ask for some hints"
  map global coq q ": coqide-query<ret>" \
    -docstring "send a query to coqtop"
  map global coq l ": coqide-dump-log<ret>" \
    -docstring "dump logs"

  # Create two additional clients to show goals and results
  hook global BufCreate (goal|result)-(.*) %{
    evaluate-commands %sh{
      client_name="${kak_hook_param_capture_1}-${kak_hook_param_capture_2}"

      switch_to_buffer="
        buffer $kak_hook_param_capture_0
        rename-client $client_name

        try %{
          remove-highlighter buffer/line_numbers
          remove-highlighter buffer/matching
          remove-highlighter buffer/wrap_lines
          remove-highlighter buffer/show-whitespaces
        }
      "

      # ${kak_opt_termcmd} "kak -c $kak_session -e '$switch_to_buffer'" &>/dev/null </dev/null &
      echo "new '$switch_to_buffer'"
      echo "hook -once global BufClose '$kak_hook_param_capture_0' %{
        evaluate-commands -client '$client_name' 'quit!'
      }"
    }
  }


  hook global WinCreate .* %{
    hook window WinSetOption filetype=coq %{
      require-module coqide

      # User mode to interact with CoqIDE only in Coq files
      map buffer user c ": enter-user-mode coq<ret>" \
        -docstring "enter the Coq user mode"

      # Enable symbols in the gutter for errors/axioms
      coqide-enable-gutter-symbols
      # -> To disable: coqide-disable-gutter symbols
      set-option global coqide_gutter_error_symbol "█"
      set-option global coqide_gutter_admitted_symbol "░"     # I quite like these ones
      set-face global coqide_gutter_error_face red+b
      set-face global coqide_gutter_admitted_face yellow+br

      # Better looking face
      set-face global coqide_processed_face default,black
      set-face global coqide_error_face default,default,bright-red+c
      set-face global coqide_admitted_face default,default,yellow+cd
      set-face global coqide_to_be_processed_face default,default,black+u

      # Commands to execute when the buffer is closed.
      # These are declared here as a string in order to have the value of `%opt{coqide_pid}`
      # (which is an internal option)
      set-option buffer coqide_close_panels "
        evaluate-commands -client goal-%opt{coqide_pid} 'quit!'
        evaluate-commands -client result-%opt{coqide_pid} 'quit!'
        remove-hooks coqide-%opt{coqide_pid}
      "

      # Remove the side panels when closing the buffer
      hook global -group "coqide-%opt{coqide_pid}" BufClose "%val{buffile}" %{ try %opt{coqide_close_panels} }
      hook global -group "coqide-%opt{coqide_pid}" ClientClose .* %{ try %opt{coqide_close_panels} }
    }
  }
}


# PlantUML
plug "KJ_Duncan/kakoune-plantuml.kak" domain "bitbucket.org" config %{
  
}


# ------------------------------------------------------------------------------------------------------------------


# Only on kitty
declare-option -docstring "The command to launch a new terminal" str termcmd "kitty sh -c"
# ^^^ This SUCKS so much because most plugins do '${kak_opt_termcmd} "command with args"' but kitty
# treats the string as a single program name
# As a temporary fix, we spawn an instance of sh to interpret that string
hook global GlobalSetOption kitty_window_type=.* %{
  set-option global kitty_window_type "os-window"
}


# -- set line numbers on all buffer
declare-option -docstring "The position in the buffer, in percent" int buf_position 0
hook global BufSetOption filetype=(?!\*kaktree\*).* %{
  hook -always buffer ModeChange push:.*:insert %{
    add-highlighter -override buffer/line_numbers number-lines -hlcursor -separator ' ' -min-digits 4
  }
  hook -always buffer ModeChange pop:insert:.* %{
		add-highlighter -override buffer/line_numbers number-lines -hlcursor -separator ' ' -relative -min-digits 4
  }

  add-highlighter -override buffer/line_numbers number-lines -hlcursor -separator ' ' -relative -min-digits 4
  add-highlighter buffer/wrap_lines wrap -word -indent

  hook buffer RawKey .* %{
    set-option buffer buf_position %sh{
      echo -n $(($kak_cursor_line * 100 / $kak_buf_line_count))
    }
  }
}


# -- set <tab> for autocompletion
hook global InsertCompletionShow .* %{
  try %{
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      map window insert <tab> <tab>
      map window insert <s-tab> <s-tab>
    }
  }
}


# -- set indent to 2 spaces 
set global indentwidth 2
set global tabstop 2


# -- set modeline on the top
set global ui_options status_on_top=yes


# -- custom movements keymaps
map global normal <c-left> 'b;'
map global normal <c-right> 'w;'
map global insert <c-left> '<a-;>b<a-;>;'
map global insert <c-right> '<a-;>w<a-;>;'
map global normal <c-up> <c-u>
map global normal <c-down> <c-d>
# ↓↓↓ this one does not work in alacritty...
map global insert <c-backspace> '<esc>b<a-c>'


# -- set some custom colors
set-face global Information white,rgb:434C5E
set-face global MenuBackground white,rgb:3B4252
set-face global MenuForeground default,rgb:3B4252+r
#set-face global StatusLine default,rgb:3B4252


# -- load the closest editorconfig to the newly opened buffer
hook global BufOpenFile .* editorconfig-load
hook global BufNewFile .* editorconfig-load


# -- output a simple "-- INSERT --" when entering insert mode
hook global ModeChange push:.*:insert %{
  echo -markup "{+b}-- INSERT --"
}
hook global ModeChange pop:insert:.* echo


# -- set formatters
declare-user-mode format
map global format s ': format-selections<ret>' -docstring 'selections'
map global format b ': format-buffer<ret>' -docstring 'buffer'

map global user f ': enter-user-mode format<ret>' -docstring 'format'

hook global WinSetOption filetype=python %{ set-option buffer formatcmd 'yapf' }
hook global WinSetOption filetype=nix %{ set-option buffer formatcmd 'nixpkgs-fmt' }
hook global WinSetOption filetype=markdown %{ set-option buffer formatcmd 'mdfmt' }

# -- small tweaks
set-face global comment default+d


# -- colors
set-face global PrimarySelection black,white+d
set-face global PrimaryCursor black,white
set-face global SecondarySelection black,white+d
set-face global SecondaryCursor black,white

set-face global LineNumbers bright-black+i
set-face global LineNumberCursor bright-white+i
set-face global LineNumbersWrapped rgb:2E3440 # This sucks to hardcode but oh well

hook global BufCreate .*\.agda$ %{
  set-option buffer filetype agda
}
